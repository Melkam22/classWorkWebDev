{"version":3,"sources":["photo.jpg","components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","state","title","gameStatus","Array","fill","player","winner","draw","clickedSelection","e","i","stopPropagation","currentGameStatus","currentPlayer","calculateWinner","setState","onResetClick","winningLines","d","length","a","b","c","this","includes","console","log","props","className","onClick","id","map","item","key","Component","App","src","Photo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yHAAAA,EAAOC,QAAU,IAA0B,mC,4NCgG5BC,E,2MA5FXC,MAAQ,CACJC,MAAO,cACPC,WAAY,IAAIC,MAAM,GAAGC,KAAK,MAC9BC,OAAc,IACdC,OAAQ,KACRC,KAAM,I,EAGVC,iBAAmB,SAACC,EAAGC,GACnBD,EAAEE,kBAGF,IAAIC,EAAoB,EAAKZ,MAAME,WACnC,GAAiC,OAA7B,EAAKF,MAAME,WAAWQ,GAAa,CACnCE,EAAkBF,GAAK,EAAKV,MAAMK,OAClC,IAAIQ,EAAsC,MAAtB,EAAKb,MAAMK,OAAiB,IAAM,IACtD,EAAKS,gBAAgBF,GACrB,EAAKG,SAAS,CACVb,WAAYU,EACZP,OAAQQ,M,EAsCpBG,aAAe,WACX,EAAKD,SAAS,CACVb,WAAY,IAAIC,MAAM,GAAGC,KAAK,MAC9BC,OAAc,IACdC,OAAQ,KACRC,KAAM,M,+EAtCEK,GAYZ,IAXA,IAAIK,EAAe,CACf,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAAK,CAAC,IAAD,cACxBD,EAAaC,GADW,GACnCE,EADmC,KAChCC,EADgC,KAC7BC,EAD6B,KAEtCV,EAAkBQ,IAAMR,EAAkBQ,KACtCR,EAAkBS,IAAMT,EAAkBQ,KAC1CR,EAAkBU,GAEtBC,KAAKR,SAAS,CACVT,OAAQiB,KAAKvB,MAAMK,SAGjBkB,KAAKvB,MAAME,WAAWsB,SAAS,OACjCD,KAAKvB,MAAMM,QACfiB,KAAKR,SAAS,CACVR,KAAM,mC,+BAiBZ,IAAD,OAEL,OADAkB,QAAQC,IAAIH,KAAKI,OAEb,oCACI,2CACA,yBAAKC,UAAU,UAAUL,KAAKvB,MAAMM,QAAU,wCAC7CiB,KAAKvB,MAAMM,OADkC,SAA9C,IACgCiB,KAAKvB,MAAMO,MAAQ,4BAC1CgB,KAAKvB,MAAMO,OAEpB,4BAAQqB,UAAU,QAAQC,QAASN,KAAKP,cAAxC,SAGA,yBAAKc,GAAG,aACHP,KAAKvB,MAAME,WAAW6B,IAAI,SAACC,EAAMtB,GAC9B,OAAQ,yBAAKmB,QACR,EAAK7B,MAAMM,OAAS,KACjB,SAACG,GAAD,OAAO,EAAKD,iBAAiBC,EAAGC,IACpCkB,UAAU,QAAQK,IAAKvB,GACvB,0BAAMkB,UAAU,WAAWI,Y,GArFpCE,aCuCJC,E,iLAlBX,OACE,oCACE,kEACA,yBAAKC,IAAKC,IAAOC,IAAI,QAAQV,UAAU,UAEvC,kBAAC,EAAD,W,GAnBUM,aCEEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d4416672.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/photo.48e1e2d0.jpg\";","import React, { Component } from 'react';\n//import './App.js';\n\nclass Main extends Component {\n    state = {\n        title: \"Tic-Tac-Toe\",\n        gameStatus: new Array(9).fill(null),//ternary func, no repitition on result\n        player: \"X\" ? \"O\" : \"X\",//only X or O given it repeats the text on result\n        winner: null,\n        draw: \"\"//false\n    }\n\n    clickedSelection = (e, i) => {\n        e.stopPropagation()\n\n        //gameStatus & player updated \n        let currentGameStatus = this.state.gameStatus;\n        if (this.state.gameStatus[i] === null) {\n            currentGameStatus[i] = this.state.player\n            let currentPlayer = this.state.player === \"X\" ? \"O\" : \"X\";\n            this.calculateWinner(currentGameStatus);\n            this.setState({\n                gameStatus: currentGameStatus,\n                player: currentPlayer\n            });\n        }\n    }\n\n    calculateWinner(currentGameStatus) {\n        let winningLines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n\n        for (let d = 0; d < winningLines.length; d++) {\n            const [a, b, c] = winningLines[d];\n            if (currentGameStatus[a] && currentGameStatus[a]\n                === currentGameStatus[b] && currentGameStatus[a]\n                === currentGameStatus[c]) {\n                //let score = document.querySelector(\".result\").innerHTML += \"Bravo! you won.\";this is only for js\n                this.setState({\n                    winner: this.state.player\n                })\n            }\n            else if (!this.state.gameStatus.includes(null)\n                && !this.state.winner) {\n                this.setState({\n                    draw: \"draw, click reset & replay!\",\n                    //draw: true\n                })\n            }\n        }\n    }\n\n    //reset button, we put in this func all the list from status\n    onResetClick = () => {\n        this.setState({\n            gameStatus: new Array(9).fill(null),\n            player: \"X\" ? \"O\" : \"X\",//result\n            winner: null,\n            draw: \"\"\n        })\n    }\n\n    render() {\n        console.log(this.props);\n        return (\n            <>\n                <h1>Tic-Tac-Toe</h1>\n                <div className=\"result\">{this.state.winner && <h1>Congrats!\n                {this.state.winner} won!</h1>} {this.state.draw && <h2>\n                        {this.state.draw}</h2>}</div>\n\n                <button className=\"reset\" onClick={this.onResetClick}>\n                    Reset</button>\n\n                <div id=\"container\">\n                    {this.state.gameStatus.map((item, i) => {\n                        return (<div onClick=\n                            {this.state.winner ? null :\n                                (e) => this.clickedSelection(e, i)}\n                            className=\"boxes\" key={i}>\n                            <span className=\"circles\">{item}</span></div>)\n                    })}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Main;","import React, { Component } from 'react';\nimport Photo from './photo.jpg';\nimport './App.css';\nimport Main from './components/main.jsx';\n\n/* const Example = (props) =>{\n  console.log(props.age)\n  return(\"Hi\")\n} */\n\nclass App extends Component {\n\n  /* winningLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n */\n  render() {\n    return (\n      <>\n        <h1>This is Tic-Tac-Toe with React-jsx</h1>\n        <img src={Photo} alt=\"Photo\" className=\"photo\" />\n\n        <Main />\n        {/* <Main \n        winner={this.winningLines} \n        age=\"22\",\n        name=\"Ashu\",\n        calcAge={()=>{console.log(\"hi\")}}\n      />\n      <Example age={12}/> */}\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}